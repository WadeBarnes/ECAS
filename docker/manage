#!/bin/bash
export MSYS_NO_PATHCONV=1
set -e

S2I_EXE=s2i
if [ -z $(type -P "$S2I_EXE") ]; then
  echo -e "The ${S2I_EXE} executable is needed and not on your path."
  echo -e "It can be downloaded from here: https://github.com/openshift/source-to-image"
  echo -e "Make sure you place it in a directory on your path."
  exit 1
fi

SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF
    
      Usage: $0 [command] [options]
    
      Commands:
    
      build - Build the docker images for the project.
              You need to do this first, since the builds require
              a combination of Docker and S2I builds.
    
              You can build individual components as shown below, components that have dependencies
              will have these dependencies built too.
    
              Examples:
               - Build the api only.
    
                $0 build ecas-api
    
              By default all containers that components comprise of, will be rebuilt.
    
                $0 build 
    
      up -  Creates the application containers from the built images
            and starts the services based on the docker-compose.yml file.

            You can pass in a list of containers to start.  
            By default all containers will be started.

            Examples:
            $0 start
            $0 start ecas-frontend
            $0 start ecas-api

      start - Same as up

      start-dev - Starts the containers in development mode, using hot-reload for ecas-api and ecas-web.

      logs - Display the logs from the docker compose run (ctrl-c to exit).

      stop - Stops the services.  This is a non-destructive process.  The volumes and containers
             are not deleted so they will be reused the next time you run start.
    
      down - Brings down the services and removes the volumes (storage) and containers.
      rm - Same as down
EOF
  exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------
DEFAULT_CONTAINERS="ecas-frontend" 
# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
build-ecas-frontend() {
  #
  # ecas-frontend
  #

  echo "in build-ecas-frontend"

  BASE_IMAGE="registry.access.redhat.com/rhscl/php-71-rhel7"
  echo -e "\nBuilding ecas-frontend image from ${BASE_IMAGE}..."
  ${S2I_EXE} build \
    '../web-app' \
    "$BASE_IMAGE" \
    'ecas-frontend'
}

build-ecas-api() {
  #
  # ecas-api
  #
  BASE_IMAGE="registry.access.redhat.com/dotnet/dotnet-21-rhel7"
  echo -e "\nBuilding ecas-api image from ${BASE_IMAGE}..."
  ${S2I_EXE} build \
    '../web-api/Ecas.Dyn365Service' \
    "$BASE_IMAGE" \
    'ecas-api'
}

buildImages() {
  echo "in buildImages"

  build-ecas-frontend
  build-ecas-api
}

configureEnvironment() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']}
      fi
    done <.env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done


  export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-ecas}"

  export STI_SCRIPTS_PATH=${STI_SCRIPTS_PATH:-/usr/libexec/s2i}
  
}

getStartupParams() {
  CONTAINERS=""
  ARGS="--force-recreate"

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    *)
      CONTAINERS+=" $arg"
      ;;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$(toLower ${1})
shift || COMMAND=usage

case "${COMMAND}" in
start|up)
  unset DEBUG
  DEFAULT_CONTAINERS="ecas-frontend  $DEFAULT_CONTAINERS"
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose up -d ${_startupParams} 
  docker-compose logs -f
 ;;
start-dev)
  export DEBUG=true
  DEFAULT_CONTAINERS="ecas-frontend"
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose up -d ${_startupParams} 
  docker-compose logs -f
 ;;
logs)
  configureEnvironment $@
  docker-compose logs -f
  ;;
stop)
  DEFAULT_CONTAINERS="ecas-frontend ecas-frontend-dev"
  configureEnvironment
  docker-compose stop 
  ;;
rm|down)
  configureEnvironment
  deleteVolumes
  ;;
build)
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  case "$@" in
  *)
    echo "buildImages"
    buildImages    
    ;;
  esac
  ;;
*)
  usage
  ;;
esac

popd >/dev/null
